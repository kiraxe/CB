// Авро схемы топиков кафки хранятся в blueprint.topics.<название топика>.x-ncbvas-meta-schema
// Метаданные по пайплайну хранятся в секции blueprint.x-ncbvas-meta-data.pipeline
//    Описание полей UI - в массиве blueprint.x-ncbvas-meta-data.pipeline.ui 
//    Каждый элемент этого массива - { name = <название поля в интерфейсе>, type = <тип поля>, value = <Значение поля, редактируется в интерфейсе> , symbols=<массив значений для типа enum> },
// Метаданные по стримлетам хранятся в массиве blueprint.x-ncbvas-meta-data.streamlets
//    Каждый элемент массива - { id = <Идентификатор стримлета из blueprint.streamlets> , tunes = <массив названий схем настроек> , ui = <массив аналогичный blueprint.x-ncbvas-meta-data.pipeline.ui> }
//
common-kafka-config = {
  topic {
    partitions = 1
    replicas = 1
    retention.ms = 604800000
  }
  producer-config {
    linger.ms = 5
    batch.size = 131072
  }
}

blueprint {
  streamlets {
    prev-ind-enrich = ru.neoflex.vas.streamlet.IndicatorsEnrichment
    actual-ind-calc = ru.neoflex.vas.streamlet.ChActualIndicatorsCalculator
    derived-ind-calc = ru.neoflex.vas.streamlet.ChDerivedIndicatorsCalculator
    indicators-multiplier = ru.neoflex.vas.streamlet.FromJsonFileMultiplier
    client-filter = ru.neoflex.vas.streamlet.ClientFilter
    trigger-file-sink = ru.neoflex.vas.FileSink
    ind-aggregator = ru.neoflex.vas.streamlet.Aggregator
  }
  topics {
    vas-kafka-input = ${common-kafka-config}{
      consumers = [prev-ind-enrich.in]
      x-ncbvas-meta-schema = "LoanContract.avsc"
    }
    vas-enr-indicators = ${common-kafka-config}{
      producers = [prev-ind-enrich.out]
      consumers = [actual-ind-calc.in]
      x-ncbvas-meta-schema = "LoanContractEnrich.avsc"
    }
    vas-actual-indicators = ${common-kafka-config}{
      producers = [actual-ind-calc.out]
      consumers = [derived-ind-calc.in]
      x-ncbvas-meta-schema = "LoanContractEnrichActual.avsc"
    }
    vas-derived-indicators = ${common-kafka-config}{
      producers = [derived-ind-calc.out]
      consumers = [indicators-multiplier.in]
      x-ncbvas-meta-schema = "LoanContractFullInfo.avsc"
    }
    vas-multiply-indicators = ${common-kafka-config}{
      producers = [indicators-multiplier.out]
      consumers = [ind-aggregator.in, client-filter.in]
      x-ncbvas-meta-schema = "LoanContractMulti.avsc"
    }
    vas-filtered-events = ${common-kafka-config}{
      producers = [client-filter.out]
      consumers = [trigger-file-sink.in]
      x-ncbvas-meta-schema = "LoanContractMulti.avsc"
    }
    vas-kafka-out1 = ${common-kafka-config}{
      producers = [trigger-file-sink.out]
      x-ncbvas-meta-schema = "LoanContractMulti.avsc"
    }
    vas-kafka-out2 = ${common-kafka-config}{
      producers = [ind-aggregator.out]
      x-ncbvas-meta-schema = "LoanContractAggr.avsc"
    }
  }

  x-ncbvas-meta-data {
     pipeline {
       ui = [
          { name = "Pipeline name", type = "string", value = "Triggers CH" , symbols=[] },
          { name = "Description",   type = "string", value = "Notification of changes in the subject's credit file" , symbols=[] },
          { name = "Pipeline type", type = "enum",   value = "processing", symbols = ["processing", "billing", "response", "report", "selection" ] }
       ]
     }
     streamlets = [
       { 
         id = "prev-ind-enrich", 
         tunes = [],
         ui = [
               { name = "Streamlet name", type = "string", value = "Previous CH metrics", symbols = [] },
               { name = "Description",    type = "string", value = "Getting credit history metrics from database", symbols = [] },
               { name = "Streamlet type", type = "enum",   value = "storage_read", symbols = ["rest", "storage_read", "storage_write", "kafka_read", "kafka_write", "log", "file_read", "file_write", "processing", "script", "filter"] },
               { name = "Database access",type = "string", value = "Request for previous CH metrics", symbols = [] } 
              ] 
       },
       { 
         id = "actual-ind-calc", 
         tunes = [],
         ui = [
               { name = "Streamlet name", type = "string", value = "Actual CH metrics", symbols = [] },
               { name = "Description",    type = "string", value = "Calculation of actual credit history metrics", symbols = [] },
               { name = "Streamlet type", type = "enum",   value = "processing", symbols = ["rest", "storage_read", "storage_write", "kafka_read", "kafka_write", "log", "file_read", "file_write", "processing", "script", "filter"] },
               { name = "Database access",type = "string", value = "Writing actual values to database", symbols = [] } 
              ] 
       },
       { 
         id = "derived-ind-calc", 
         tunes = ["ru.neoflex.vas.СalculatedIndicatorPipeline", "ru.neoflex.vas.СalculatedIndicatorProduct"],
         ui = [
               { name = "Streamlet name", type = "string", value = "Derived indicators", symbols = [] },
               { name = "Description",    type = "string", value = "Calculation of derived indicators", symbols = [] },
               { name = "Streamlet type", type = "enum",   value = "processing", symbols = ["rest", "storage_read", "storage_write", "kafka_read", "kafka_write", "log", "file_read", "file_write", "processing", "script", "filter"] }
              ] 
       },
       { 
         id = "indicators-multiplier", 
         tunes = [],
         ui = [
               { name = "Streamlet name", type = "string", value = "Multiplier", symbols = [] },
               { name = "Description",    type = "string", value = "Multiplication of messages", symbols = [] },
               { name = "Streamlet type", type = "enum",   value = "processing", symbols = ["rest", "storage_read", "storage_write", "kafka_read", "kafka_write", "log", "file_read", "file_write", "processing", "script", "filter"] },
               { name = "Database access",type = "string", value = "Request for population selections", symbols = [] } 
              ] 
       },
       { 
         id = "client-filter", 
         tunes = ["ru.neoflex.vas.IndicatorForFilter", "ru.neoflex.vas.FiltersClient"],
         ui = [
               { name = "Streamlet name", type = "string", value = "Filter", symbols = [] },
               { name = "Description",    type = "string", value = "Filtering messages", symbols = [] },
               { name = "Streamlet type", type = "enum",   value = "filter", symbols = ["rest", "storage_read", "storage_write", "kafka_read", "kafka_write", "log", "file_read", "file_write", "processing", "script", "filter"] }
              ] 
       },
       { 
         id = "trigger-file-sink", 
         tunes = [],
         ui = [
               { name = "Streamlet name", type = "string", value = "Trigger log", symbols = [] },
               { name = "Description",    type = "string", value = "Logging of trigger event", symbols = [] },
               { name = "Streamlet type", type = "enum",   value = "log", symbols = ["rest", "storage_read", "storage_write", "kafka_read", "kafka_write", "log", "file_read", "file_write", "processing", "script", "filter"] }
              ] 
       },
       { 
         id = "ind-aggregator", 
         tunes = [],
         ui = [
               { name = "Streamlet name", type = "string", value = "Aggregator", symbols = [] },
               { name = "Description",    type = "string", value = "Indicators aggregation", symbols = [] },
               { name = "Streamlet type", type = "enum",   value = "processing", symbols = ["rest", "storage_read", "storage_write", "kafka_read", "kafka_write", "log", "file_read", "file_write", "processing", "script", "filter"] }
              ] 
       }

     ]
  }

}

